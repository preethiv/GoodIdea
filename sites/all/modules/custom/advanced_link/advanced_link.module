<?php
// $Id $

/**
 * @file
 */

/**
 * Implementation of hook_init().
 */
function advanced_link_init() {
  if (!variable_get('clean_url', 0)) {
    module_disable(array('advanced_link'));
    drupal_set_message(t('<em>Advanced Link</em> has been disabled. <a href="!url">Clean URLs</a> need to be enabled for this module to work properly.', array('!url' => url('admin/settings/clean-urls'))), 'warning');
  }
  drupal_add_css(drupal_get_path('module', 'advanced_link') .'/advanced_link_links.css');
}

/**
 * Implementation of hook_perm().
 */
function advanced_link_perm() {
  return array('access advanced link', 'administer advanced link');
}

/**
 * Implementation of hook_menu().
 */
function advanced_link_menu() {
  $items['advanced_link/autocomplete'] = array(
    'page callback' => 'advanced_link_autocomplete',
    'access arguments' => array('access advanced link'),
    'type' => MENU_CALLBACK,
  );

  $items['advanced_link/linkcheck'] = array(
    'page callback' => 'advanced_link_linkcheck',
    'access arguments' => array('access advanced link'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/settings/advanced_link'] = array(
    'title' => 'Advanced Link Configuration',
    'description' => 'Advanced Link Configuration.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('advanced_link_admin_settings'),
    'access arguments' => array('administer advanced link'),
  );
  return $items;
}

/**
 * Menu callback: Advanced Link admin settings.
 */
function advanced_link_admin_settings(&$form_state) {
  $form = array();

  $form['advanced_link_settings']['advanced_link_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types'),
    '#options' => array_map('check_plain', node_get_types('names')),
    '#default_value' => variable_get('advanced_link_content_types', array('' => '')),
    '#description' => t('Content types for Advanced Link autosuggestions.'),
  );

  $form['advanced_link_settings']['advanced_link_status'] = array(
    '#type' => 'fieldset',
    '#title' => t('External Link Style Settings'),
    '#collapsible' => FALSE,
  );
  
  $form['advanced_link_settings']['advanced_link_status']['external_link_class'] = array(
    '#type' => 'textfield',
    '#title' => t('External Link Class'),
    '#size' => 50,
    '#maxlength' => 128,
    '#description' => t('Class to automatically apply to all external links.'),
    '#default_value' => variable_get('external_link_class', ''),
  );
  
  $form['advanced_link_settings']['advanced_link_status']['active_link_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Active Link Class'),
    '#size' => 50,
    '#maxlength' => 128,
    '#description' => t('Class to automatically apply to active external links.'),
    '#default_value' => variable_get('active_link_class', ''),
  );
  
  $form['advanced_link_settings']['advanced_link_status']['broken_link_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Broken Link Class'),
    '#size' => 50,
    '#maxlength' => 128,
    '#description' => t('Class to automatically apply to broken external links.'),
    '#default_value' => variable_get('broken_link_class', ''),
  );

  $form['content_type_classes'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Types Link Style Classes Settings'),
    '#collapsible' => FALSE,
  );

  foreach (node_get_types('types') as $type) {
  	$type_name = node_get_types('name', $type);
	  $form['content_type_classes'][$type->type.'_link_class'] = array(
	    '#type' => 'textfield',
	    '#title' => t($type_name.' Class'),
	    '#size' => 50,
	    '#maxlength' => 128,
	    '#default_value' => variable_get($type->type.'_link_class', ''),
	  );
  }

  $form['autosuggest_field_options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Autosuggstion Field Options'),
    '#collapsible' => FALSE,
  );

  foreach (node_get_types('types') as $type) {
  	$content_type = content_types($type->type);
  	$options = array('Use Default');
  	foreach ($content_type['fields'] as $field) {
  		$options[] = $field['field_name'];
  	}
	  $form['autosuggest_field_options']['advanced_link_'.$type->type] = array(
	    '#type' => 'radios',
	    '#title' => t($type->name),
	    '#options' => $options,
	    '#default_value' => variable_get('advanced_link_'.$type->type, 0),
	  );
  }
  return system_settings_form($form);
}

function advanced_link_autocomplete($string = '') {
  $matches = array();

  if ($string !== '') {
  	$content_types = array_values(array_filter(variable_get('advanced_link_content_types', array('' => ''))));
  	if (count($content_types) > 0) {
  		foreach ($content_types as $value) {
  			$ctypes[] = "'$value'";
  		}
  		$content_types = implode(',', $ctypes);
    	$sql = db_rewrite_sql("SELECT n.nid, n.title, n.type FROM {node} n WHERE n.title LIKE '%%%s%%' AND n.type IN ($content_types) ORDER BY n.title, n.type");
  	}
  	else {
    	$sql = db_rewrite_sql("SELECT n.nid, n.title, n.type FROM {node} n WHERE n.title LIKE '%%%s%%' ORDER BY n.title, n.type");
  	}
    $result = db_query_range($sql, array($string), 0, 10);
    while ($node = db_fetch_object($result)) {
    	$nd = node_load($node->nid);
    	$type_name = node_get_types('name', $nd);
    	$output = theme('advanced_link_autocomplete_output', $nd);
      $matches[$node->title .' ['.$node->type.'] (node/'. $node->nid. ')'] = $output;
    }
  }

  drupal_json($matches);
}

/**
 * Implementation of hook_theme().
 */
function advanced_link_theme() {
    return array(
        'advanced_link_autocomplete_output' => array(
            'arguments' => array('node'),
        )
    );
}

/**
 * Autocomplete suggession theme function.
 */
function theme_advanced_link_autocomplete_output($node) {
	$option = variable_get('advanced_link_'.$node->type, 0);
	if ($option) {
  	$content_type = content_types($node->type);
  	$options = array('Use Default');
  	foreach ($content_type['fields'] as $field) {
  		$options[] = $field['field_name'];
  	}
  	$field = $options[$option];
  	$fielditem = $node->$field[0];
  	
  	if (isset($node->$field)) {
	  	foreach ($node->$field as $fielditem) {
	  		if (isset($fielditem['value'])) {
	  			$text = substr($fielditem['value'], 0, 45);
	  			break;
	  		}
	  		if (isset($fielditem['filemime']) && substr($fielditem['filemime'], 0, 5) == 'image') {
	  			$imagepath = $fielditem['filepath'];
	  			break;
	  		}
	 	  }
  	}
	}
	if (!$text && !$imagepath) {
		$text = $node->title;
	}
	$type_name = node_get_types('name', $node);
	if ($imagepath) {
		$attributes = array();
    $attributes['width'] = 40;
    $attributes['height'] = 40;
    $image = theme('imagecache', 'thumb40x40', $imagepath, '', '');
    $attributes = drupal_attributes($attributes);
    $text = substr($node->title, 0, 40);
    
		return '<div class="reference-autocomplete">'.$image.' '. check_plain($text .'( '.$type_name.' )') .'</div>';
	}
	else {
		return '<div class="reference-autocomplete">'. check_plain($text .'( '.$type_name.' )') .'</div>';
	}
}

function advanced_link_linkcheck() {
	$exturl = $_POST['link'];
	$handle = @fopen($exturl, "r");
	
	$status = 1;
	if (!$handle) {
		$status = 0;
	}
	
  drupal_json(array('status' => $status));
}

/**
 * Implementation of hook_form_alter().
 */
function advanced_link_form_alter(&$form, &$form_state) {
  if (user_access('access advanced link')) {
    $form['#after_build'][] = 'advanced_link_process_form';
  }
}

function advanced_link_process_form(&$form, &$form_state) {
  static $added = FALSE;
  $types_link_Classes = array();
  foreach (node_get_types('types') as $type) {
  	$type_name = node_get_types('name', $type);
  	$types_link_Classes[$type->type] = variable_get($type->type.'_link_class', '');
  }
  
  if (!$added && ($js = drupal_add_js()) && isset($js['setting'])) {
    $setting = call_user_func_array('array_merge_recursive', $js['setting']);
    if (isset($setting['ckeditor']) || isset($setting['wysiwyg']['configs']['ckeditor'])) {
      drupal_add_css(drupal_get_path('module', 'advanced_link').'/advanced_link.css');
      drupal_add_js('misc/autocomplete.js');
      drupal_add_js(array('ckeditor_link' => array(
        'module_path' => base_path().drupal_get_path('module', 'advanced_link'),
        'autocomplete_path' => url('advanced_link/autocomplete'),
        'link_check_path' => url('advanced_link/linkcheck'),
        'msg_invalid_path' => t('Link must be a valid Drupal path.'),
        'external_link_class' => variable_get('external_link_class', ''),
        'active_link_class' => variable_get('active_link_class', ''),
        'broken_link_class' => variable_get('broken_link_class', ''),
        'node_types_classes' => $types_link_Classes,
      )), 'setting');
      $added = TRUE;
    }
  }
  return $form;array_merge($array1);
}

/**
 * Implementation of hook_wysiwyg_plugin().
 */
function advanced_link_wysiwyg_plugin($editor, $version) {
  if (($editor == 'ckeditor') && user_access('access advanced link')) {
    return array('drupal_path' => array(
      'path' => drupal_get_path('module', 'advanced_link').'/plugins/link/',
      'load' => TRUE,
      'extensions' => array('Link' => t('CKEditor Link')),
    ));
  }
}

/**
 * Implementation of hook_filter().
 */
function advanced_link_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
  switch ($op) {
    case 'list':
      return array(0 => t('CKEditor Link Filter'));

    case 'description':
      return t('Converts links added through <em>CKEditor Link</em> into aliased and language prefixed URLs.');

    case 'no cache':
      return FALSE;

    case 'prepare':
      return $text;

    case 'process':
      return preg_replace_callback('`\bhref="'. preg_quote(base_path(), '`') .'node/(\d+)(?=[?#"])`', '_advanced_link_filter_process', $text);

    default:
      return $text;
  }
}

function _advanced_link_filter_process($matches) {
  $nid = $matches[1];
  $options = array();

  if ($lang = db_result(db_query('SELECT language FROM {node} WHERE nid = %d', $nid))) {
    $languages = language_list('enabled');
    $languages = $languages[1];
    if (isset($languages[$lang])) {
      $options['language'] = $languages[$lang];
    }
  }

  return 'href="'. url("node/$nid", $options);
}
